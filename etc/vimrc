" This must be first, because it changes other options as a side effect.
" Use Vim settings, rather then Vi settings (much better!).
set nocompatible

" Initialize Pathogen, so that we can have selfcontained vim plugins
execute pathogen#infect()

" For vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='ubaryd'
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline_powerline_fonts = 1

" disable the built-in showing of mode in the command bar since airline will
" take care of that
set noshowmode

" go import magic
let g:go_fmt_command = "goimports"

set t_Co=256
set background=dark
colorscheme ir_black_custom

" Common typos
command! Q  quit
command! W  write
command! Wq wq

" Control-Shift-b invokes make -C <dirname(current buffer)>
nmap <C-S-b> :make -C %:h<CR>
nmap <leader>gi :GoInstall<CR>

" remove the delay when pressing esc
set noesckeys

" Some emacs keybindings thats used all over OS X

" duplicate line / block
" nmap <C-D> yyp
" vmap <C-D> y']pgv

" delete one char in front
imap <C-d> <Delete>

" CtrlP customization
" Cmd + r -> show symbols in current buffer
nmap <leader>r :CtrlPBufTagAll <CR>
" treat git root dir as the working dir
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*.pyc,*.o
let g:ctrlp_custom_ignore='\.(pyc|o)'

" Automatically strip trailing whitespace
autocmd BufWritePre * StripWhitespace

" Center the current line vertically
nmap <C-l> zz

" Show cursor position
set ruler

" for letting swtich away from a modified buffer w/o warning
set hidden

" for highlighting search word
set hlsearch

" Command-T configuration
let g:CommandTMaxHeight=20

" always show gitgutter col so text doesn't jump around when they come in
let g:gitgutter_sign_column_always=1
set updatetime=750

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" Show invisible chars
set list!

set title

" Show cursor position
set ruler

" Always show the status line (even if no split windows)
set laststatus=2
" set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P

" Number of lines to keep between cursor and window boundary before scrolling
" kicks in.
set scrolloff=7

" Auto-detect git commit messages
autocmd BufNewFile,BufRead COMMIT_EDITMSG set filetype=gitcommit

" Source the vimrc file after saving it
if has("autocmd")
    autocmd bufwritepost .vimrc source $MYVIMRC
endif

" Taken from http://dotfiles.org/~defunkt/.vimrc

" os x backspace fix
set backspace=indent,eol,start
"set t_kb
fixdel

" tabs -> spaces
" set expandtab

" don't leave hardtabs
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" highlight the current line
set cursorline

" turn mouse on
set mouse=a
set ttymouse=xterm2

" space = pagedown, - = pageup
noremap <Space> <PageDown>
noremap - <PageUp>

" remap'd keys
map <Tab><Tab> <C-W>w
nnoremap <F5><F5> :set invhls hls?<CR>    " use f5f5 to toggle search hilight
nnoremap <F4><F4> :set invwrap wrap?<CR>  " use f4f4 to toggle wordwrap
nnoremap <F2><F2> :vsplit<CR>
nnoremap <F3><F3> <C-W>w

" Shortcut to rapidly toggle `set list` a.k.a show invisibles
nmap <leader>l :set list!<CR>

" shortcuts to edit files in the same dir as the current open file
map <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind G to grep word under cursor
nnoremap <C-S-G> :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" function RubyEndToken ()
"   let current_line = getline( '.' )
"   let braces_at_end = '{\s*\(|\(,\|\s\|\w\)*|\s*\)\?$'
"   let stuff_without_do = '^\s*\(class\|if\|unless\|begin\|case\|for\|module\|while\|until\|def\)'
"   let with_do = 'do\s*\(|\(,\|\s\|\w\)*|\s*\)\?$'
"
"   if match(current_line, braces_at_end) >= 0
"     return "\<CR>}\<C-O>O"
"   elseif match(current_line, stuff_without_do) >= 0
"     return "\<CR>end\<C-O>O"
"   elseif match(current_line, with_do) >= 0
"     return "\<CR>end\<C-O>O"
"   else
"     return "\<CR>"
"   endif
" endfunction

" imap <buffer> <CR> <C-R>=RubyEndToken()<CR>

" backup to ~/.tmp
set backup
set backupdir=$HOME/.tmp
set writebackup

" folding settings
set foldmethod=indent
set foldlevelstart=20

" Create .swp files here to avoid git status pollution
set dir=$HOME/.tmp
"
" misc
"set ai
set incsearch
set showcmd
set nowrap
set nu

syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

" Some tab helpers (<leader> is \)
map <leader>]t :tabnew<cr>
map <leader>]c :tabclose<cr>
map <leader>]m :tabmove
map <leader>]n :tabnext<cr>
map <leader>]p :tabprevious<cr>
map <leader>]` :tabfirst<cr>
map <leader>]1 1gt
map <leader>]2 2gt
map <leader>]3 3gt
map <leader>]4 4gt
map <leader>]5 5gt
map <leader>]6 6gt
map <leader>]7 7gt
map <leader>]8 8gt
map <leader>]9 9gt
map <leader>]0 :tablast<cr>

" reformat JSON
map <leader>jt  <Esc>:%!json_xs -f json -t json-pretty<CR>

" disable logipat plugin so that :E works again
let g:loaded_logipat = 1

