if &compatible
  set nocompatible
endif
set runtimepath+=~/.nvim/bundle/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.nvim/bundle')
    call dein#begin('~/.nvim/bundle')

    " Let dein manage dein
    call dein#add('Shougo/dein.vim')

    " Navigation
    call dein#add('mileszs/ack.vim.git')
    call dein#add('justinmk/vim-dirvish')
    call dein#add('ctrlpvim/ctrlp.vim')
    call dein#add('ludovicchabant/vim-gutentags')
    call dein#add('junegunn/fzf')

    " Git
    call dein#add('airblade/vim-gitgutter.git')
    call dein#add('tpope/vim-fugitive')
    call dein#add('tpope/vim-rhubarb')

    " Go
    call dein#add('fatih/vim-go')
    call dein#add('majutsushi/tagbar')

    " react / js
    call dein#add('pangloss/vim-javascript')
    call dein#add('mxw/vim-jsx')

    " Appearance
    call dein#add('frankier/neovim-colors-solarized-truecolor-only')
    call dein#add('flazz/vim-colorschemes')
    call dein#add('justinmk/molokai')
    call dein#add('nanotech/jellybeans.vim')
    call dein#add('nathanaelkane/vim-indent-guides.git')
    call dein#add('morhetz/gruvbox')
    call dein#add('romainl/flattened')
    call dein#add('whatyouhide/vim-gotham')
    call dein#add('NLKNguyen/papercolor-theme')
    call dein#add('rakr/vim-one')
    call dein#add('rakr/vim-two-firewatch')
    call dein#add('mhartington/oceanic-next')
    call dein#add('itchyny/lightline.vim')
    call dein#add('mgee/lightline-bufferline')
    call dein#add('joshdick/onedark.vim')
    call dein#add('KeitaNakamura/neodark.vim')
    call dein#add('neutaaaaan/iosvkem')

    " Build
    call dein#add('benekastah/neomake')

    " Editing
    call dein#add('ntpeters/vim-better-whitespace.git')
    call dein#add('tpope/vim-surround')
    call dein#add('tpope/vim-unimpaired')
    call dein#add('tpope/vim-abolish')
    call dein#add('tpope/vim-repeat')
    call dein#add('michaeljsmith/vim-indent-object')
    call dein#add('AndrewRadev/splitjoin.vim')
    call dein#add('wellle/targets.vim')
    call dein#add('justinmk/vim-sneak')
    call dein#add('FooSoft/vim-argwrap')

    " Jsonnet
    call dein#add('google/vim-jsonnet')

    " Snippets
    call dein#add('SirVer/ultisnips')

    " Bazel
    call dein#add('bazelbuild/vim-ft-bzl')

    if has("nvim")
        call dein#add('roxma/nvim-completion-manager')
        call dein#add('sebdah/vim-delve')
    endif

    call dein#end()
    call dein#save_state()
endif

filetype plugin indent on
syntax enable

" colorscheme overrides. has to be before any colorscheme lines
augroup colorscheme_overrides
    autocmd!
    "autocmd ColorScheme * highlight Search cterm=underline ctermfg=217 ctermbg=16 gui=underline guifg=#f0a0c0 guibg=#302028
    autocmd ColorScheme * highlight Search cterm=underline ctermfg=217 ctermbg=NONE gui=underline guifg=#f0a0c0 guibg=NONE
    " comments should be italic
    autocmd ColorScheme * highlight Comment cterm=italic gui=italic
augroup END

" completion config
set completeopt+=noinsert
set completeopt+=noselect
" disable preview scratch buffer
set completeopt-=preview

if has("gui")
    " Start without the toolbar
    set guioptions-=T
    " Start without the right toolbar
    set guioptions-=r
    set guioptions-=R
    " Start without the left toolbar
    set guioptions-=l
    set guioptions-=L
endif

if has("gui_macvim")
    set guifont=Knack\ Nerd\ Font:h13

    colorscheme one
    set background=light

    " Fullscreen takes up entire screen
    set fuoptions=maxhorz,maxvert

    " Map Command-# to switch tabs
    map  <D-0> 0gt
    imap <D-0> <Esc>0gt
    map  <D-1> 1gt
    imap <D-1> <Esc>1gt
    map  <D-2> 2gt
    imap <D-2> <Esc>2gt
    map  <D-3> 3gt
    imap <D-3> <Esc>3gt
    map  <D-4> 4gt
    imap <D-4> <Esc>4gt
    map  <D-5> 5gt
    imap <D-5> <Esc>5gt
    map  <D-6> 6gt
    imap <D-6> <Esc>6gt
    map  <D-7> 7gt
    imap <D-7> <Esc>7gt
    map  <D-8> 8gt
    imap <D-8> <Esc>8gt
    map  <D-9> 9gt
    imap <D-9> <Esc>9gt
endif


" makes neovim use gui colors in themes instead of cterm colors, usually this
" is only useful with a tmux and iterm2 / kitty both capable of displaying
" 24bit "True" color
"
" NOTE: setting this in vim8 causes colors to not work at all, so limiting
" this to neovim only for now
if has("nvim") && has("termguicolors")
    set termguicolors
endif

if has("nvim")
    " let g:two_firewatch_italics=1
    "colorscheme two-firewatch
    "set background=dark

    "colorscheme one
    "set background=dark

    "colorscheme PaperColor
    "set background=dark

    " let g:rehash256 = 1
    " let g:molokai_original = 1
    "colorscheme molokai
    "set background=dark

    " colorscheme jelleybeans
    " set background=light

    "set background=dark
    "colorscheme kalisi

    "colorscheme Tomorrow-Night
    "set background=dark

    "let g:gruvbox_italic=1
    "let g:gruvbox_contrast_dark="medium"
    "set background=dark
    "colorscheme gruvbox

    "colorscheme OceanicNext
    "set background=dark
    "let g:airline_theme='oceanicnext'

    "colorscheme onedark
    "set background=dark

    "colorscheme neodark
    "set background=dark
    "let g:neodark#terminal_transparent = 1 " default: 0

    colorscheme Iosvkem
    set background=dark

    " built-in terminal navigation
    tnoremap <A-h> <C-\><C-n><C-w>h
    tnoremap <A-j> <C-\><C-n><C-w>j
    tnoremap <A-k> <C-\><C-n><C-w>k
    tnoremap <A-l> <C-\><C-n><C-w>l
    nnoremap <A-h> <C-w>h
    nnoremap <A-j> <C-w>j
    nnoremap <A-k> <C-w>k
    nnoremap <A-l> <C-w>l

    " Neomake configuration
    let g:neomake_python_flake8_maker = {
        \ 'args': ['--format=default', '--ignore=E261,E302,E402,E501,E731'],
        \ 'errorformat':
            \ '%E%f:%l: could not compile,%-Z%p^,' .
            \ '%A%f:%l:%c: %t%n %m,' .
            \ '%A%f:%l: %t%n %m,' .
            \ '%-G%.%#',
        \ 'postprocess': function('neomake#makers#ft#python#Flake8EntryProcess')
        \ }
    let g:neomake_javascript_enabled_makers = ['eslint']
    let g:neomake_python_enabled_makers = ['flake8']
    let g:neomake_go_enabled_makers = ['go', 'gometalinter']
    "let g:neomake_go_gometalinter_args = ['--disable-all', '--enable=errcheck', '--enable=gosimple', '--enable=staticcheck', '--enable=unused']
    let g:neomake_go_gometalinter_args = ['--fast']

    " don't use fancy unicode symbols since terminals seem to have trouble
    " rendering them correctly.
    "let g:neomake_error_sign = {
    "    \   'text': '',
    "    \   'texthl': 'NeomakeErrorSign',
    "    \ }
    "let g:neomake_warning_sign = {
    "    \   'text': '',
    "    \   'texthl': 'NeomakeWarningSign',
    "    \ }
    "let g:neomake_message_sign = {
    "    \   'text': 'M',
    "    \   'texthl': 'NeomakeMessageSign',
    "    \ }
    "let g:neomake_info_sign = {
    "    \   'text': '',
    "    \   'texthl': 'NeomakeInfoSign',
    "    \ }
    let g:neomake_error_sign = {
        \   'text': '>>',
        \   'texthl': 'NeomakeErrorSign',
        \ }
    let g:neomake_warning_sign = {
        \   'text': 'W',
        \   'texthl': 'NeomakeWarningSign',
        \ }
    let g:neomake_message_sign = {
        \   'text': 'M',
        \   'texthl': 'NeomakeMessageSign',
        \ }
    let g:neomake_info_sign = {
        \   'text': 'I',
        \   'texthl': 'NeomakeInfoSign',
        \ }

    " For conceal markers.
    if has('conceal')
        " hide concealed chars, except in insert, visual and command modes
        set conceallevel=2 concealcursor=n
    endif

    " sebdah/vim-delve config
    nnoremap <leader>db :DlvToggleBreakpoint<cr>
    nnoremap <leader>dr :DlvToggleTracepoint<cr>
    nnoremap <leader>dc :DlvClearAll<cr>
    nnoremap <leader>dt :DlvTest<cr>
    nnoremap <leader>dd :DlvDebug<cr>
endif

if !has("nvim")
    " remove the delay when pressing esc
    set noesckeys

    " cargo cult nvim defaults
    set autoindent
    set autoread
    set backspace="indent,eol,start"
    set display="lastline"
    set formatoptions="tcqj"
    set history=10000
    set nrformats="bin,hex"
    set showcmd
    set smarttab
    set tabpagemax=50
    set tags="./tags;,tags"
    set ttyfast
    set wildmenu
endif

" plain old vim
if !has("nvim") && !has("gui_macvim")
    colorscheme Tomorrow-Night
    set background=dark

    " change cursor shape
    " Ps = 0  -> blinking block.
    " Ps = 1  -> blinking block (default).
    " Ps = 2  -> steady block.
    " Ps = 3  -> blinking underline.
    " Ps = 4  -> steady underline.
    " Ps = 5  -> blinking bar (xterm).
    " Ps = 6  -> steady bar (xterm).
    let &t_SI = "\e[6 q"
    let &t_EI = "\e[2 q"

    " optional reset cursor on start:
    augroup cursor_shapes
        au!
        autocmd VimEnter * silent !echo -ne "\e[2 q"
    augroup END
endif

" Toggle background with <leader>bg
map <leader>bg :let &background = (&background == "dark" ? "light" : "dark")<cr>

" gutentags config
let g:gutentags_ctags_exclude = [
            \    'bazel-analytics/*',
            \    'bazel-out/*',
            \    'bazel-bin/*',
            \    'bazel-genfiles/*',
            \    '*/third_party/*',
            \    '*/external/*',
            \    '*/eventlet/*',
            \    'go/src*/vendor/*',
            \    'go/src/wavefront/*',
            \    'go/.build/*',
            \    '*clj/*',
            \    '*node_modules/*',
            \    '*media/*',
            \    'servers/*',
            \    '*.json',
            \    '*.js',
            \    '*.html',
            \    '*.css',
            \]

" nvim-completion-manager
let g:cm_matcher = {'module': 'cm_matchers.abbrev_matcher'}

" vim-go
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1 " let neomake / ale show syntax errors
let g:go_snippet_engine = 'ultisnips'
let g:go_decls_mode = 'fzf'
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_methods = 1
"let g:go_highlight_extra_types = 1
"let g:go_highlight_functions = 1
"let g:go_highlight_generate_tags = 1

" reduce the delay before auto_sameids and auto_type_info activates
let g:go_updatetime = 300
let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
" prevent "Press enter to continue" message on auto type info
set cmdheight=2

" Add the failing test name to the output of :GoTest
let g:go_test_show_name = 1

" go specific keybindings
augroup filetype_go
    autocmd!
    autocmd FileType go nnoremap <buffer> <localleader>gb :GoBuild<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gi :GoInstall<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gt :GoTest<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gtf :GoTestFunc<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gc :GoCoverageToggle<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gf :GoImports<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gm :GoMetaLinter<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gd :GoDecls<CR>
    autocmd FileType go nnoremap <buffer> <localleader>ge :GoIfErr<CR>
    autocmd FileType go nnoremap <buffer> <C-i> :GoAutoTypeInfoToggle<CR>

    " tagbar
    autocmd FileType go nnoremap <silent> <localleader>tb :TagbarToggle<cr>
augroup END

" js specific keybindings
augroup filetype_js
    autocmd!
    autocmd FileType javascript.jsx setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
    autocmd FileType css setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
    autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
augroup END

" vim-jsx config
let g:jsx_ext_required = 0

" lightline config
set showtabline=2
let g:lightline#bufferline#unnamed         = '[No Name]'
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline                    = {}
if has("nvim")
    " this breaks in vanilla vim for some reason
    "let g:lightline.colorscheme        = 'neodark'
endif
let g:lightline.active             = {'left': [['mode', 'paste'], ['gitbranch', 'readonly', 'relativepath', 'modified']]}
let g:lightline.component          = {'sep': '-> '}
let g:lightline.component_function = {'gitbranch': 'LightlineGitBranch'}
let g:lightline.component_expand   = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type     = {'buffers': 'tabsel'}
let g:lightline.tabline            = {'left': [['tabs'], ['sep'], ['buffers']]}
let g:lightline.tab                = {}
let g:lightline.tab.inactive       = ['tabnum']
let g:lightline.tab.active         = ['tabnum']

function! LightlineGitBranch()
    let name = fugitive#head()
    return name ==# '' ? '' : ' ' . name
endfunction

" vim-sneak
" 2-character Sneak (don't let vim-sneak take s)
nmap f <Plug>Sneak_s
nmap F <Plug>Sneak_S
" visual-mode
xmap f <Plug>Sneak_s
xmap F <Plug>Sneak_S
" operator-pending-mode
omap f <Plug>Sneak_s
omap F <Plug>Sneak_S

" FooSoft/vim-argwrap config
let g:argwrap_tail_comma = 1
nnoremap <silent> <leader>w :ArgWrap<CR>

" FZF + CtrlP config
command! FZFMru call fzf#run(fzf#wrap({
\ 'source':  s:mru_filelist(),
\ 'options': '--multi --extended --no-sort',
\ 'down':    '40%' }))
let g:ctrlp_map = '<c-\>' " rename CtrlP binding to something else
nnoremap <c-p> :FZFMru<cr>

function! s:mru_filelist() abort
    let cmd = 'git ls-files --full-name'
    return extend(ctrlp#mrufiles#refresh(), systemlist(cmd))
endfunction

" CtrlP customization
let g:ctrlp_cmd = 'CtrlPMRU'
" treat git root dir as the working dir
let g:ctrlp_working_path_mode = 'ra'

"set wildignore+=*.pyc,*.o,*.a,*.clj,*.css,*.html,*.js
set wildignore+=*.pyc,*.o,*.a,*.clj

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --ignore=html\ --ignore=js\ --ignore=css\ --ignore=clj/\ --ignore=vendor/\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g "" --ignore=js --ignore=css --ignore=clj/ --ignore=vendor/'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" For fast scrolling
"set nocursorline
"set lazyredraw

" Learn VimScript The Hard Way Excercises
" chapter 04
" turns current word to upper case
inoremap <C-u> <Esc>mzviwU`za
"nnoremap <C-u> mzviwU`z

" chapter 07
" edit my vimrv in a vsplit
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" source my vimrv in a vsplit
nnoremap <leader>sv :source $MYVIMRC<cr>

" chapter 09
" surround visually selected word in single quotes
vnoremap <leader>' <esc>`<i'<Esc>`>la'<esc>
" jump to beginning of line
nnoremap H ^
" jump to end of line
nnoremap L $
" scroll faster
nnoremap <C-j> 5j
nnoremap <C-k> 5k

" chapter 15
" operator pending for inside-next-paren and inside-last-paren
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap il{ :<c-u>normal! F}vi{<cr>

" chapter 32
" operator for :grep
nnoremap <leader>a :set operatorfunc=<sid>GrepOperator<cr>g@
vnoremap <leader>a :<c-u>call <sid>GrepOperator(visualmode())<cr>

function! s:GrepOperator(type)
    let saved_unnamed_register = @@

    if a:type ==# 'v'
        normal! `<v`>y
    elseif a:type ==# 'char'
        normal! `[v`]y
    else
        return
    endif

    execute "silent grep! " . shellescape(@@) . " ."
    copen

    let @@ = saved_unnamed_register
endfunction

" destroy add buffers
nnoremap <leader>bd :bufdo bd<cr>

" start profile
nnoremap <leader>pr :profile start /tmp/profile.log<cr>:profile func *<cr>:profile file *<cr>

" quickfix nav
nnoremap [] :cclose<cr>
nnoremap ][ :copen<cr>

" location list nav
nnoremap () :lclose<cr>
nnoremap )( :lopen<cr>

" tab pages
nnoremap <leader>]t :tabnew<cr>
nnoremap <leader>]c :tabclose<cr>

" moving selected lines
xnoremap <silent> <c-k> :move-2<CR>gv=gv
xnoremap <silent> <c-j> :move'>+<CR>gv=gv

" search for visually selected text
vnoremap // y/\V<C-r>=escape(@",'/\')<CR><CR>

" persistent undo file
set undofile

" :Silent command to supress "Press Enter to continue" messages
command! -nargs=+ Silent execute 'silent <args>' | redraw!

" bind G to grep word under cursor
" nnoremap <leader>g :Silent grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
nnoremap <M-g> :Silent grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" For vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
" only load what you want
let g:airline_extensions = ['branch', 'tabline']

" For vim-indent-guides
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2

" disable the built-in showing of mode in the command bar since airline will
" take care of that
set noshowmode
set noruler

" show both absolute current line no and relative numbers
set relativenumber number

" Common typos
command! Q  quit
command! W  write
command! Wq wq
command! Cq cq


" Some emacs keybindings thats used all over OS X

" duplicate line / block
" nmap <C-D> yyp
" vmap <C-D> y']pgv

" delete one char in front
inoremap <C-d> <Delete>

" Show cursor position
" 2016-01-31: disabling because perf & airline shows this anyway
set noruler

" for letting swtich away from a modified buffer w/o warning
set hidden

" for highlighting search word
set hlsearch

" always show gitgutter col so text doesn't jump around when they come in
set signcolumn=yes
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 1

" Use the same symbols as TextMate for tabstops and EOLs
"set listchars=tab:▸\ ,eol:¬
set listchars=tab:»\ ,eol:¬

" Show invisible chars
set list

set title

" Always show the status line (even if no split windows)
set laststatus=2
" set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P

" Number of lines to keep between cursor and window boundary before scrolling
" kicks in.
set scrolloff=7
" Number of lines to jump when scrolling. Improves rendering speed
set scrolljump=5

if has("autocmd")
    " Automatically lint files on save
    "autocmd! BufWritePost * Neomake
    augroup auto_neomake
        autocmd!
        autocmd BufWritePost *.py if exists(":Neomake") | exe "Neomake" | endif
        autocmd BufWritePost *.go if exists(":Neomake") | exe "Neomake" | endif
    augroup END

    " Automatically strip trailing whitespace
    augroup strip_whitespace
        autocmd!
        autocmd BufWritePre * if exists(":StripWhitespace") | exe "StripWhitespace" | endif
    augroup END

    " Auto-detect git commit messages
    augroup git_commit_msg
        autocmd!
        autocmd BufNewFile,BufRead COMMIT_EDITMSG set filetype=gitcommit
    augroup END

    " yaml indentation
    autocmd FileType yaml setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
endif

" don't leave hardtabs
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround

" highlight the current line
" 2016-01-32: disabling this since it slows down rendering
" set cursorline

" turn mouse on
set mouse=a
" set ttymouse=xterm2

" remap'd keys
nnoremap <Tab><Tab> <C-W>w

" Show syntax highlighting groups for word under cursor
" nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" delete all hidden buffers
command! CloseHiddenBuffers call s:CloseHiddenBuffers()
function! s:CloseHiddenBuffers()
  let open_buffers = []

  for i in range(tabpagenr('$'))
    call extend(open_buffers, tabpagebuflist(i + 1))
  endfor

  for num in range(1, bufnr("$") + 1)
    if buflisted(num) && index(open_buffers, num) == -1
      exec "bdelete ".num
    endif
  endfor
endfunction

" backup to ~/.tmp
set backup
set backupdir=$HOME/.tmp
set writebackup

" folding settings
set foldmethod=indent
set foldlevelstart=20

" Create .swp files here to avoid git status pollution
set dir=$HOME/.tmp
"
" misc
"set ai
set incsearch
set nowrap

" show live previews for :substitute
if has("inccommand")
    set inccommand=nosplit
endif

" reformat JSON
map <leader>jt  <Esc>:%!json_xs -f json -t json-pretty<CR>

" disable logipat plugin so that :E works again
let g:loaded_logipat = 1

" netrw settings
let g:netrw_liststyle=3
