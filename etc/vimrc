if &compatible
  set nocompatible
endif

" Bootstrap Plug
try
    let autoload_plug_path = stdpath('data') . '/site/autoload/plug.vim'
catch E117
    let autoload_plug_path = expand('~/.vim/autoload/plug.vim')
endtry

if !filereadable(autoload_plug_path)
  silent execute '!curl -fLo ' . autoload_plug_path . '  --create-dirs
      \ "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
unlet autoload_plug_path

call plug#begin('~/.nvim/plugged')

" Navigation
Plug 'mileszs/ack.vim'
Plug 'justinmk/vim-dirvish'
Plug 'ludovicchabant/vim-gutentags'
Plug 'tweekmonster/fzf-filemru'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
"Plug 'yuki-ycino/fzf-preview.vim', { 'commit': '1eab3f0', 'do': ':UpdateRemotePlugins' }
Plug 'ojroques/nvim-lspfuzzy'
Plug 'fszymanski/fzf-quickfix'
Plug 'rbtnn/vim-jumptoline'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" Go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'majutsushi/tagbar'

" react / js
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'

" Appearance
Plug 'frankier/neovim-colors-solarized-truecolor-only'
"Plug 'flazz/vim-colorschemes'
Plug 'justinmk/molokai'
Plug 'nanotech/jellybeans.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'morhetz/gruvbox'
Plug 'romainl/flattened'
Plug 'whatyouhide/vim-gotham'
Plug 'NLKNguyen/papercolor-theme'
Plug 'rakr/vim-one'
Plug 'rakr/vim-two-firewatch'
Plug 'mhartington/oceanic-next'
Plug 'itchyny/lightline.vim'
Plug 'mgee/lightline-bufferline'
Plug 'joshdick/onedark.vim'
Plug 'KeitaNakamura/neodark.vim'
Plug 'neutaaaaan/iosvkem'
Plug 'chriskempson/base16-vim'
Plug 'ayu-theme/ayu-vim'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'NieTiger/halcyon-neovim'
Plug 'vimpostor/vim-tpipeline'
Plug 'embark-theme/vim', { 'as': 'embark' }

" Linting
" using built-in based lsp
"Plug 'benekastah/neomake'

" Editing
Plug 'ntpeters/vim-better-whitespace'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
Plug 'michaeljsmith/vim-indent-object'
Plug 'coderifous/textobj-word-column.vim'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'wellle/targets.vim'
Plug 'justinmk/vim-sneak'
Plug 'FooSoft/vim-argwrap'
Plug 'whiteinge/diffconflicts'
Plug 'junegunn/vim-peekaboo' " shows register contents
Plug 'nelstrom/vim-visual-star-search' " search visual selected contents with '*' and '#'
Plug 'mg979/vim-visual-multi' " multiple cursors

" Jsonnet
Plug 'google/vim-jsonnet'

" Bazel
Plug 'bazelbuild/vim-ft-bzl'

" auto complete
"Plug 'ncm2/ncm2'
"Plug 'roxma/nvim-yarp'
"Plug 'ncm2/ncm2-bufword'
"Plug 'ncm2/ncm2-tmux'
"Plug 'ncm2/ncm2-ultisnips'

" disabled to give pyls + nvim-lsp a chance
"Plug 'ncm2/ncm2-jedi'
"Plug 'entombedvirus/ncm2-vim-go'

if has("nvim")
    " autocomplete
    Plug 'hrsh7th/nvim-compe'
    Plug 'hrsh7th/vim-vsnip'

    Plug 'neovim/nvim-lspconfig'

    " Snippets
    Plug 'SirVer/ultisnips'

    Plug 'nvim-treesitter/nvim-treesitter' " fast syntax (non-regex based) highlighting

    " colorschemes that use treesitter
    Plug 'christianchiarulli/nvcode.vim'
    Plug 'glepnir/zephyr-nvim'
endif

" Initialize plugin system
call plug#end()

filetype plugin indent on
syntax enable

" fzf-preview config
"
" disable MRU tracking inside fzf-preview by clearing the fzf_preview_mru
" group.  since it's slow and I don't use it. This can only be done until
" after the fzf_preview has been initialized, which is signaled by a User
" event.
let g:fzf_preview_disable_mru = 1

" vimpostor/vim-tpipeline config
let g:tpipeline_split = 1

" colorscheme overrides. has to be before any colorscheme lines
augroup colorscheme_overrides
    autocmd!
    "autocmd ColorScheme * highlight Search cterm=underline ctermfg=217 ctermbg=16 gui=underline guifg=#f0a0c0 guibg=#302028
    autocmd ColorScheme * highlight Search cterm=underline ctermfg=217 ctermbg=NONE gui=italic guifg=#f0a0c0 guibg=NONE
    " comments should be italic
    autocmd ColorScheme * highlight Comment cterm=italic gui=italic
    autocmd ColorScheme * highlight default link LspReferenceText Search
augroup END

if has("gui")
    " Start without the toolbar
    set guioptions-=T
    " Start without the right toolbar
    set guioptions-=r
    set guioptions-=R
    " Start without the left toolbar
    set guioptions-=l
    set guioptions-=L
endif

if has("gui_macvim")
    set guifont=Knack\ Nerd\ Font:h13

    colorscheme one
    set background=light

    " Fullscreen takes up entire screen
    set fuoptions=maxhorz,maxvert

    " Map Command-# to switch tabs
    map  <D-0> 0gt
    imap <D-0> <Esc>0gt
    map  <D-1> 1gt
    imap <D-1> <Esc>1gt
    map  <D-2> 2gt
    imap <D-2> <Esc>2gt
    map  <D-3> 3gt
    imap <D-3> <Esc>3gt
    map  <D-4> 4gt
    imap <D-4> <Esc>4gt
    map  <D-5> 5gt
    imap <D-5> <Esc>5gt
    map  <D-6> 6gt
    imap <D-6> <Esc>6gt
    map  <D-7> 7gt
    imap <D-7> <Esc>7gt
    map  <D-8> 8gt
    imap <D-8> <Esc>8gt
    map  <D-9> 9gt
    imap <D-9> <Esc>9gt
endif


" makes neovim use gui colors in themes instead of cterm colors, usually this
" is only useful with a tmux and iterm2 / kitty both capable of displaying
" 24bit "True" color
"
" NOTE: setting this in vim8 causes colors to not work at all, so limiting
" this to neovim only for now
if has("nvim") && has("termguicolors")
    set termguicolors
endif

if has("nvim")
    " let g:two_firewatch_italics=1
    "colorscheme two-firewatch
    "set background=dark

    "colorscheme PaperColor
    "set background=dark

    "let g:rehash256 = 1
    "let g:molokai_original = 1
    "colorscheme molokai
    "set background=dark

    " colorscheme jelleybeans
    " set background=light

    "set background=dark
    "colorscheme kalisi

    "colorscheme Tomorrow-Night
    "set background=dark

    "let g:gruvbox_italic=1
    "let g:gruvbox_contrast_dark="medium"
    "set background=dark
    "colorscheme gruvbox

    "colorscheme OceanicNext
    "set background=dark
    "let g:airline_theme='oceanicnext'

    "colorscheme one
    "set background=dark

    "colorscheme onedark
    "set background=dark

    "colorscheme neodark
    "set background=dark
    "let g:neodark#terminal_transparent = 1 " default: 0
    colorscheme embark
    let g:lightline = {
      \ 'colorscheme': 'embark',
      \ }

    "hi Comment cterm=italic
    "let g:nvcode_hide_endofbuffer=1
    "let g:nvcode_terminal_italics=1
    "let g:nvcode_termcolors=256
    "colorscheme nvcode
    "set background=dark
    "hi LineNr ctermbg=NONE guibg=NONE

    "colorscheme zephyr
    "set background=dark

    "colorscheme Iosvkem
    "set background=dark

    "colorscheme base16-gruvbox-dark-medium
    "set background=dark

    "colorscheme base16-eighties
    "set background=dark

    "let ayucolor="light"
    "let ayucolor="dark"
    ""let ayucolor="mirage"
    "colorscheme ayu

    "set background=dark
    "colorscheme palenight
    "let g:lightline = { 'colorscheme': 'palenight' }
    "let g:palenight_terminal_italics=1

    "set background=dark
    "colorscheme kuroi

    "colorscheme halcyon
    "set background=dark

    " built-in terminal navigation
    tnoremap <A-h> <C-\><C-n><C-w>h
    tnoremap <A-j> <C-\><C-n><C-w>j
    tnoremap <A-k> <C-\><C-n><C-w>k
    tnoremap <A-l> <C-\><C-n><C-w>l
    nnoremap <A-h> <C-w>h
    nnoremap <A-j> <C-w>j
    nnoremap <A-k> <C-w>k
    nnoremap <A-l> <C-w>l

    " Neomake configuration
    let g:neomake_python_flake8_maker = {
        \ 'args': ['--format=default', '--ignore=E261,E302,E402,E501,E731'],
        \ 'errorformat':
            \ '%E%f:%l: could not compile,%-Z%p^,' .
            \ '%A%f:%l:%c: %t%n %m,' .
            \ '%A%f:%l: %t%n %m,' .
            \ '%-G%.%#',
        \ 'postprocess': function('neomake#makers#ft#python#Flake8EntryProcess')
        \ }
    let g:neomake_javascript_enabled_makers = ['eslint']
    let g:neomake_python_enabled_makers = ['flake8']
    "let g:neomake_go_enabled_makers = ['go', 'golangci_lint']
    "let g:neomake_go_golangci_lint_args = ['run', '--no-config']

    " don't use fancy unicode symbols since terminals seem to have trouble
    " rendering them correctly.
    let g:neomake_error_sign = {
        \   'text': '>>',
        \   'texthl': 'NeomakeErrorSign',
        \ }
    let g:neomake_warning_sign = {
        \   'text': 'W',
        \   'texthl': 'NeomakeWarningSign',
        \ }
    let g:neomake_message_sign = {
        \   'text': 'M',
        \   'texthl': 'NeomakeMessageSign',
        \ }
    let g:neomake_info_sign = {
        \   'text': 'I',
        \   'texthl': 'NeomakeInfoSign',
        \ }

    " For conceal markers.
    if has('conceal')
        " hide concealed chars, except in insert, visual and command modes
        set conceallevel=2 concealcursor=n
    endif

    " sebdah/vim-delve config
    nnoremap <leader>db :DlvToggleBreakpoint<cr>
    nnoremap <leader>dr :DlvToggleTracepoint<cr>
    nnoremap <leader>dc :DlvClearAll<cr>
    nnoremap <leader>dt :DlvTest<cr>
    nnoremap <leader>dd :DlvDebug<cr>

    " entry point to all of lua config
    lua require'init'
endif

if !has("nvim")
    " remove the delay when pressing esc
    set noesckeys

    " cargo cult nvim defaults
    set autoindent
    set autoread
    set backspace="indent,eol,start"
    set display="lastline"
    set formatoptions="tcqj"
    set history=10000
    set nrformats="bin,hex"
    set showcmd
    set smarttab
    set tabpagemax=50
    set tags="./tags;,tags"
    set ttyfast
    set wildmenu
endif

" plain old vim
if !has("nvim") && !has("gui_macvim")
    colorscheme Tomorrow-Night
    set background=dark

    " change cursor shape
    " Ps = 0  -> blinking block.
    " Ps = 1  -> blinking block (default).
    " Ps = 2  -> steady block.
    " Ps = 3  -> blinking underline.
    " Ps = 4  -> steady underline.
    " Ps = 5  -> blinking bar (xterm).
    " Ps = 6  -> steady bar (xterm).
    let &t_SI = "\e[6 q"
    let &t_EI = "\e[2 q"

    " optional reset cursor on start:
    augroup cursor_shapes
        au!
        autocmd VimEnter * silent !echo -ne "\e[2 q"
    augroup END
endif

" Toggle background with <leader>bg
map <leader>bg :let &background = (&background == "dark" ? "light" : "dark")<cr>

" diagnostic-nvim config
let g:diagnostic_enable_virtual_text = 1
let g:diagnostic_insert_delay = 1

" gutentags config
let g:gutentags_define_advanced_commands = 1
" keep the lock and temp files outside of git workspace
let g:gutentags_cache_dir = expand('~/.cache/gutentags')
let g:gutentags_ctags_extra_args = ['--links=no']
let g:gutentags_ctags_auto_set_tags = 1
" NOTE: since we're using a cache_dir, exclude patterns cannot be relative to
" project root.
let g:gutentags_ctags_exclude = [
            \    '*/third_party/*',
            \    '*/external/*',
            \    '*/eventlet/*',
            \    '*/go/src*/vendor/*',
            \    '*/go/src/wavefront/*',
            \    '*/go/.build/*',
            \    '*clj/*',
            \    '*node_modules/*',
            \    '*media/*',
            \    '*/analytics/servers/*',
            \    '*.json',
            \    '*.js',
            \    '*.html',
            \    '*.css',
            \    '*bindata.go',
            \]

" ncm2 completion config
"set completeopt=noinsert,noselect,menuone

set shortmess+=c
if v:false && has("nvim")
    " CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
    inoremap <silent> <c-c> <ESC>

    " use CTRL-j and CTRL-k for moving up and down complete options
    inoremap <silent> <c-j> <c-r>=pumvisible() ? "\<lt>Down>" : "\<lt>c-j>"<CR>
    inoremap <silent> <c-k> <c-r>=pumvisible() ? "\<lt>Up>" : "\<lt>c-k>"<CR>

    function! Lsp_snippet_expand() abort
        try
            let l:ud = json_decode(v:completed_item.user_data)
            let l:snippet = l:ud.nvim.lsp.completion_item.textEdit.newText
            let l:snippet = substitute(l:snippet, '{\\}', '\{}', 'g')
            call UltiSnips#Anon(l:snippet, v:completed_item.word, '', 'i')
        catch /E716/ " key does not exist
            "noop
        finally
            return ''
        endtry
    endfunction

    function! RRAVI_ncm2_expand()
        call ncm2#enable_for_buffer()
        " NOTE: this key binding has to be defined after
        " ncm2#enable_for_buffer() for it to actually trigger the expansion
        imap <silent> <expr> <c-u> ncm2_ultisnips#expand_or("\<c-r>=Lsp_snippet_expand()\<cr>", 'm')
        "imap <silent> <expr> <c-u> ncm2_ultisnips#expand_or("", 'm')
    endfunction

    augroup ncm2_completion
        autocmd!
        autocmd BufEnter * call RRAVI_ncm2_expand()
    augroup END
endif

" fzf config
if has("nvim")
    let $FZF_DEFAULT_OPTS='--layout=reverse --border --margin=0,2'
    "highlight NormalFloat cterm=NONE ctermfg=14 ctermbg=0 gui=NONE guifg=#93a1a1 guibg=#002931

    function! FloatingFZF()
        let buf = nvim_create_buf(v:false, v:true)
        let height = &lines - 30
        let width = float2nr(&columns - (&columns * 2 / 5))
        let col = float2nr((&columns - width) / 2)

        let opts = {
                \ 'relative': 'editor',
                \ 'row': height * 0.3,
                \ 'col': col,
                \ 'width': width,
                \ 'height': height
                \ }

        let win = nvim_open_win(buf, v:true, opts)

        "Set Floating Window Highlighting
        call setwinvar(win, '&winhl', 'Normal:Pmenu')

        setlocal
                \ buftype=nofile
                \ nobuflisted
                \ bufhidden=hide
                \ nonumber
                \ norelativenumber
                \ signcolumn=no
    endfunction
    let g:fzf_layout = { 'window': 'call FloatingFZF()' }
endif

" vim-go
let g:go_fmt_command = 'goimports'
let g:go_gopls_enabled = 0
let g:go_gopls_options = ['-remote=auto', '-logfile=/tmp/gopls.vim-go.log', '-rpc.trace']
"let g:go_debug = ["lsp"]

if executable('gopls')
    " register gopls for go-to-def and auto-info
    let g:go_def_mode = 'gopls'
    let g:go_info_mode = 'gopls'
    let g:go_referrers_mode = 'gopls'
endif

let g:go_fmt_command = 'goimports'
let g:go_fmt_fail_silently = 1 " let neomake / ale show syntax errors
let g:go_snippet_engine = 'ultisnips'
let g:go_decls_mode = 'fzf'
let g:go_highlight_types = 0
let g:go_highlight_fields = 0
let g:go_highlight_format_strings = 0
let g:go_highlight_methods = 0
let g:go_highlight_extra_types = 0
let g:go_highlight_functions = 0
"let g:go_highlight_build_constraints = 1
"let g:go_highlight_generate_tags = 1
let g:go_diagnostics_enabled = 0
let g:go_doc_popup_window = 0
let g:go_doc_keywordprg_enabled = 0
let g:go_def_mapping_enabled = 0

" seems to lead to weird artifacts. vim-go uncoditionally calls UltiSnips#Anon
" if this is turned on and that does not interact well with ncm2_ultisnips.
let g:go_gopls_use_placeholders = 0

" suppress "Completion SUCCESS" messages
let g:go_echo_go_info = 0

" reduce the delay before auto_sameids and auto_type_info activates
let g:go_updatetime = 300
let g:go_auto_sameids = 0
let g:go_auto_type_info = 0

" Add the failing test name to the output of :GoTest
let g:go_test_show_name = 1

" prevent "Press enter to continue" message on auto type info
set cmdheight=2

" go specific keybindings
augroup filetype_go
    autocmd!
    autocmd FileType go nnoremap <buffer> <localleader>gb :GoBuild<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gi :GoInstall -i<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gt :GoTest<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gtf :GoTestFunc<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gc :GoCoverageToggle<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gf :GoImports<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gm :GoMetaLinter<CR>
    autocmd FileType go nnoremap <buffer> <localleader>gd :GoDecls<CR>
    autocmd FileType go nnoremap <buffer> <localleader>ge :GoIfErr<CR>
    "autocmd FileType go nnoremap <buffer> <C-i> :GoAutoTypeInfoToggle<CR>

    " tagbar
    autocmd FileType go nnoremap <silent> <localleader>tb :TagbarToggle<CR>
augroup END

"
" js specific keybindings
augroup filetype_js
    autocmd!
    autocmd FileType javascript.jsx setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
    autocmd FileType css setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
    autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
augroup END

" vim-jsx config
let g:jsx_ext_required = 0

" lightline config
set showtabline=2
let g:lightline#bufferline#unnamed         = '[No Name]'
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline                    = get(g:, 'lightline', {})
let g:lightline.active             = {
\                                      'left': [['mode', 'paste'], ['gitbranch', 'readonly', 'relativepath', 'modified']],
\                                      'right': [['lineinfo'], ['percent'], ['gutentags', 'fileformat', 'fileencoding', 'filetype']]
\                                    }
let g:lightline.inactive           = {'left': [ [ 'relativepath' ] ], 'right': [ [ 'lineinfo' ],[ 'percent' ] ] }
let g:lightline.component          = {'sep': '-> '}
let g:lightline.component_function = {'gitbranch': 'LightlineGitBranch'}
"let g:lightline.component_function = {'gitbranch': 'LightlineGitBranch', 'gutentags': 'gutentags#statusline'}
let g:lightline.component_expand   = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type     = {'buffers': 'tabsel'}
let g:lightline.tabline            = {'left': [['tabs'], ['sep'], ['buffers']]}
let g:lightline.tab                = {}
let g:lightline.tab.inactive       = ['tabnum']
let g:lightline.tab.active         = ['tabnum']

function! LightlineGitBranch()
    return '<disabled>'
    let name = fugitive#head()
    return name ==# '' ? '' : ' ' . name
endfunction

" fugitive shortcuts
" copy Github url to clipboard
nnoremap <leader>u :Gbrowse!<cr>
xnoremap <leader>u :Gbrowse!<cr>

" vim-sneak
" 2-character Sneak (don't let vim-sneak take s)
nmap f <Plug>Sneak_s
nmap F <Plug>Sneak_S
" visual-mode
xmap f <Plug>Sneak_s
xmap F <Plug>Sneak_S
" operator-pending-mode
omap f <Plug>Sneak_s
omap F <Plug>Sneak_S

" FooSoft/vim-argwrap config
let g:argwrap_tail_comma = 1
nnoremap <silent> <leader>w :ArgWrap<CR>

" ctrl-p style MRU
nnoremap <c-p> :FilesMru --tiebreak=end<cr>

" search contents of files
nnoremap <leader>r :Rg<cr>

" search tags
nnoremap <leader>t :Tags<cr>

" update MRU when opening buffers through any means, not just from FZF
augroup custom_filemru
  autocmd!
  autocmd BufWinEnter * UpdateMru
augroup END

"set wildignore+=*.pyc,*.o,*.a,*.clj,*.css,*.html,*.js
set wildignore+=*.pyc,*.o,*.a,*.clj

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --ignore=html\ --ignore=js\ --ignore=css\ --ignore=clj/\ --ignore=vendor/\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m
endif

if executable('rg')
  " Use ripgrep over grep
  set grepprg=rg\ --type-not=html\ --type-not=js\ --type-not=css\ --type-not=clojure\ --glob=\"\!vendor/\*\"\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m
endif

" For fast scrolling
"set nocursorline
"set lazyredraw

" Learn VimScript The Hard Way Excercises
" chapter 04
" turns current word to upper case
"inoremap <C-u> <Esc>mzviwU`za
"nnoremap <C-u> mzviwU`z

" chapter 07
" edit my vimrv in a vsplit
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" source my vimrv in a vsplit
nnoremap <leader>sv :source $MYVIMRC<cr>

" chapter 09
" surround visually selected word in single quotes
vnoremap <leader>' <esc>`<i'<Esc>`>la'<esc>
" jump to beginning of line
nnoremap H ^
" jump to end of line
nnoremap L $
" scroll faster
nnoremap <C-j> 5j
nnoremap <C-k> 5k

" chapter 15
" operator pending for inside-next-paren and inside-last-paren
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap il{ :<c-u>normal! F}vi{<cr>

" chapter 32
" operator for :grep
nnoremap <leader>a :set operatorfunc=<sid>GrepOperator<cr>g@
vnoremap <leader>a :<c-u>call <sid>GrepOperator(visualmode())<cr>

function! s:GrepOperator(type)
    let saved_unnamed_register = @@

    if a:type ==# 'v'
        normal! `<v`>y
    elseif a:type ==# 'char'
        normal! `[v`]y
    else
        return
    endif

    execute "silent grep! " . shellescape(@@) . " ."
    copen

    let @@ = saved_unnamed_register
endfunction

" destroy add buffers
nnoremap <leader>bd :bufdo bd<cr>

" start profile
nnoremap <leader>pr :profile start /tmp/profile.log<cr>:profile func *<cr>:profile file *<cr>

" quickfix nav
" default python plugin maps these to something else
let g:no_python_maps = 1
nnoremap [] :cclose<cr>
nnoremap ][ :copen<cr>

" location list nav
nnoremap () :lclose<cr>
nnoremap )( :lopen<cr>

" tab pages
nnoremap <leader>]t :tabnew<cr>
nnoremap <leader>]c :tabclose<cr>

" moving selected lines
xnoremap <silent> <c-k> :move-2<CR>gv=gv
xnoremap <silent> <c-j> :move'>+<CR>gv=gv

" :Silent command to supress "Press Enter to continue" messages
command! -nargs=+ Silent execute 'silent <args>' | redraw!

" bind G to grep word under cursor
" nnoremap <leader>g :Silent grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
"nnoremap <M-g> :Silent grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
"
" yank selection to the 'q' register, then grep, then open preview window
"xnoremap <M-g> "qy:Silent grep! "\b<C-R>q\b"<CR>:FzfPreviewQuickFix<CR>
xnoremap <silent> <M-g> "qy:Silent grep! "\b<C-R>q\b"<CR>:Quickfix<CR>
nnoremap <silent> <M-g> :Silent grep! "\b<C-R><C-W>\b"<CR>:Quickfix<CR>

" For vim-workspace
nnoremap <leader>s :mksession! /tmp/sess.vim<CR>:qa<CR>

" For vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
" only load what you want
let g:airline_extensions = ['branch', 'tabline']

" For vim-indent-guides
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2

" For google/vim-jsonnet
" disable fmt on save
let g:jsonnet_fmt_on_save = 0

" disable match paren functionality that causes scrolling to be slow
let g:loaded_matchparen = 1

" disable the built-in showing of mode in the command bar since airline will
" take care of that
set noshowmode
set noruler

" show both absolute current line no and relative numbers
set relativenumber number

" Common typos
command! Q  quit
command! W  write
command! Wq wq
command! Cq cq


" Some emacs keybindings thats used all over OS X

" duplicate line / block
" nmap <C-D> yyp
" vmap <C-D> y']pgv

" delete one char in front
inoremap <C-d> <Delete>

" Show cursor position
" 2016-01-31: disabling because perf & airline shows this anyway
set noruler

" for letting swtich away from a modified buffer w/o warning
set hidden

" for highlighting search word
set hlsearch

" always show gitgutter col so text doesn't jump around when they come in
set signcolumn=yes
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 1

" Use the same symbols as TextMate for tabstops and EOLs
"set listchars=tab:▸\ ,eol:¬
set listchars=tab:»\ ,eol:¬

" Show invisible chars
set list

set title

" Always show the status line (even if no split windows)
set laststatus=2
" set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P

" Number of lines to keep between cursor and window boundary before scrolling
" kicks in.
set scrolloff=7
" Number of lines to jump when scrolling. Improves rendering speed
set scrolljump=5

if has("autocmd")
    " Automatically lint files on save
    "autocmd! BufWritePost * Neomake
    "augroup auto_neomake
    "    autocmd!
    "    autocmd BufWritePost *.py if exists(":Neomake") | exe "Neomake" | endif
    "    "autocmd BufWritePost *.go if exists(":Neomake") | exe "Neomake" | endif
    "augroup END

    " Automatically strip trailing whitespace
    augroup strip_whitespace
        autocmd!
        autocmd BufWritePre * if exists(":StripWhitespace") | exe "StripWhitespace" | endif
    augroup END

    " Auto-detect git commit messages
    augroup git_commit_msg
        autocmd!
        autocmd BufNewFile,BufRead COMMIT_EDITMSG set filetype=gitcommit
    augroup END

    " yaml indentation
    autocmd FileType yaml setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
endif

" don't leave hardtabs
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround

" highlight the current line
" 2016-01-32: disabling this since it slows down rendering
" set cursorline

" turn mouse on
set mouse=a
" set ttymouse=xterm2

" remap'd keys
nnoremap <Tab><Tab> <C-W>w

" Show syntax highlighting groups for word under cursor
" nmap <C-S-P> :call <SID>SynStack()<CR>
function! SynStack()
  if !exists("*synstack")
    return
  endif
  let l:s = synID(line('.'), col('.'), 1)
  echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfunc

" delete all hidden buffers
command! CloseHiddenBuffers call s:CloseHiddenBuffers()
function! s:CloseHiddenBuffers()
  let open_buffers = []

  for i in range(tabpagenr('$'))
    call extend(open_buffers, tabpagebuflist(i + 1))
  endfor

  for num in range(1, bufnr("$") + 1)
    if buflisted(num) && index(open_buffers, num) == -1
      exec "bdelete ".num
    endif
  endfor
endfunction

" persistent undo file
set undofile
" the "//" at the end of each directory means that file names will be built
" from the complete path to the file with all path separators substituted to
" percent "%" sign. This will ensure file name uniqueness in the preserve
" directory.
set undodir=~/.tmp/.undo//
set backup
set writebackup
set backupdir=~/.tmp/.backup//
set directory=~/.tmp/.swp//
silent execute '!mkdir -p ' . &undodir . ' ' . &backupdir . ' ' &directory

" folding settings
set foldmethod=indent
set foldlevelstart=20

" misc
"set ai
set incsearch
set nowrapscan
set nowrap

" show live previews for :substitute
if has("inccommand")
    set inccommand=nosplit
endif

" default is 4000 (4s), which is too long to wait to trigger events
" like "CursorHold"
set updatetime=300

" reformat JSON
map <leader>jt  <Esc>:%!json_xs -f json -t json-pretty<CR>

" disable logipat plugin so that :E works again
let g:loaded_logipat = 1

" netrw settings
let g:netrw_liststyle=3

" sync to system clipboard
set clipboard=unnamedplus
