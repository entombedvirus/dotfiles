if has("nvim")
    "dein Scripts-----------------------------
    if &compatible
      set nocompatible               " Be iMproved
    endif

    " Required:
    set runtimepath^=~/.nvim/bundle/repos/github.com/Shougo/dein.vim

    " Required:
    call dein#begin(expand('~/.nvim/bundle'))

    " Let dein manage dein
    " Required:
    call dein#add('Shougo/dein.vim')

    " Add or remove your plugins here:
    call dein#add('Shougo/neosnippet.vim')
    call dein#add('Shougo/neosnippet-snippets')

    " You can specify revision/branch/tag.
    call dein#add('Shougo/vimshell', { 'rev': '3787e5' })

    " Navigation
    call dein#add('ctrlpvim/ctrlp.vim')
    call dein#add('mileszs/ack.vim.git')
    call dein#add('tpope/vim-vinegar')

    " Git
    call dein#add('airblade/vim-gitgutter.git')
    call dein#add('fatih/vim-go', { 'rev': 'v1.6' })
    call dein#add('tpope/vim-fugitive')

    " Appearance
    call dein#add('frankier/neovim-colors-solarized-truecolor-only')
    "call dein#add('altercation/vim-colors-solarized.git')
    call dein#add('bling/vim-airline')
    call dein#add('flazz/vim-colorschemes')
    call dein#add('justinmk/molokai')
    call dein#add('nanotech/jellybeans.vim')
    call dein#add('nathanaelkane/vim-indent-guides.git')
    call dein#add('vim-airline/vim-airline-themes')
    call dein#add('morhetz/gruvbox')
    call dein#add('romainl/flattened')
    call dein#add('whatyouhide/vim-gotham')

    " Build
    call dein#add('benekastah/neomake')

    " Editing
    call dein#add('ntpeters/vim-better-whitespace.git')
    call dein#add('vim-scripts/taglist.vim.git')
    call dein#add('tpope/vim-surround')
    call dein#add('michaeljsmith/vim-indent-object')

    " AutoCompletion
    call dein#add('Shougo/deoplete.nvim')
    call dein#add('zchee/deoplete-go', {'build': 'make'})
    call dein#add('Shougo/neosnippet')
    call dein#add('Shougo/neosnippet-snippets')

    " Required:
    call dein#end()

    " Required:
    filetype plugin indent on

    " If you want to install not installed plugins on startup.
    if dein#check_install()
      call dein#install()
    endif

    "End dein Scripts-------------------------

    " NeoVim Settings
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
    " makes neovim use gui colors in themes instead of cterm colors, usually
    " this is only useful with a tmux and iterm2 both capable of displaying
    " 24bit "True" color
    set termguicolors
    set background=dark
    colorscheme kalisi
    " colorscheme Tomorrow-Night

    " let g:gruvbox_italic=1
    " let g:gruvbox_contrast_dark="medium"
    " colorscheme gruvbox

    " Neomake configuration
    let g:neomake_python_flake8_maker = {
        \ 'args': ['--format=default', '--ignore=E261,E302,E402,E501,E731'],
        \ 'errorformat':
            \ '%E%f:%l: could not compile,%-Z%p^,' .
            \ '%A%f:%l:%c: %t%n %m,' .
            \ '%A%f:%l: %t%n %m,' .
            \ '%-G%.%#',
        \ 'postprocess': function('neomake#makers#ft#python#Flake8EntryProcess')
        \ }
    let g:neomake_python_enabled_makers = ['flake8']

    " Deoplete config
    let g:deoplete#enable_at_startup = 1
    " neocomplete like
    set completeopt+=noinsert
    " deoplete.nvim recommend
    set completeopt+=noselect

    " built-in terminal navigation
    tnoremap <A-h> <C-\><C-n><C-w>h
    tnoremap <A-j> <C-\><C-n><C-w>j
    tnoremap <A-k> <C-\><C-n><C-w>k
    tnoremap <A-l> <C-\><C-n><C-w>l
    nnoremap <A-h> <C-w>h
    nnoremap <A-j> <C-w>j
    nnoremap <A-k> <C-w>k
    nnoremap <A-l> <C-w>l

    " go specific keybindings
    augroup filetype_go
        autocmd!
        autocmd FileType go nnoremap <buffer> <localleader>gb :GoBuild<CR>
        autocmd FileType go nnoremap <buffer> <localleader>gi :GoInstall<CR>
    augroup END

    " netrw settings
    let g:netrw_fastbrowse=1

    " vim-go
    let b:goimports_vendor_compatible=1
    let g:go_fmt_command = "goimports"
endif

if !has("nvim")
    " This must be first, because it changes other options as a side effect.
    " Use Vim settings, rather then Vi settings (much better!).
    set nocompatible

    " Initialize Pathogen, so that we can have selfcontained vim plugins
    execute pathogen#infect()

    set t_Co=256
    set background=dark
    " colorscheme ir_black_custom
    colorscheme solarized
endif

" Learn VimScript The Hard Way Excercises
" chapter 04
" turns current word to upper case
inoremap <C-u> <Esc>mzviwU`za
"nnoremap <C-u> mzviwU`z

" chapter 07
" edit my vimrv in a vsplit
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" source my vimrv in a vsplit
nnoremap <leader>sv :source $MYVIMRC<cr>

" chapter 09
" surround visually selected word in single quotes
vnoremap <leader>' <esc>`<i'<Esc>`>la'<esc>
" jump to beginning of line
nnoremap H ^
" jump to end of line
nnoremap L $

" chapter 15
" operator pending for inside-next-paren and inside-last-paren
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap il{ :<c-u>normal! F}vi{<cr>

syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

" :Silent command to supress "Press Enter to continue" messages
command! -nargs=+ Silent execute 'silent <args>' | redraw!

" bind G to grep word under cursor
" nnoremap <leader>g :Silent grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
nnoremap <M-g> :Silent grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" For vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
"let g:airline_theme='gruvbox'
" let g:airline_theme='ubaryd'
" let g:airline_theme='solarized'
" let g:airline_theme='bubblegum'
let g:airline_powerline_fonts = 1

" For vim-indent-guides
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2

" disable the built-in showing of mode in the command bar since airline will
" take care of that
set noshowmode

" show both absolute current line no and relative numbers
set relativenumber number

" NERDTree bindings
" map <C-n> :NERDTreeToggle %:h<CR>
map <C-n> :NERDTreeFind<CR>

" Common typos
command! Q  quit
command! W  write
command! Wq wq


" Alt-c to copy to xclipboard. combined with ssh -X, this allows clipboard sync
" vnoremap <Esc>c :w<Home>silent <End> !xclip -in -selection clipboard<CR>
vnoremap <Esc>c Silent :w !xclip -in -selection clipboard<CR>

" remove the delay when pressing esc
set noesckeys

" Some emacs keybindings thats used all over OS X

" duplicate line / block
" nmap <C-D> yyp
" vmap <C-D> y']pgv

" delete one char in front
inoremap <C-d> <Delete>

" CtrlP customization
" Cmd + r -> show symbols in current buffer
nnoremap <leader>r :CtrlPBufTagAll <CR>
" treat git root dir as the working dir
let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*.pyc,*.o,*.a,*.js
let g:ctrlp_custom_ignore='\.(pyc|o|js)'

" Center the current line vertically
nnoremap <C-l> zz

" Show cursor position
" 2016-01-31: disabling because perf & airline shows this anyway
" set ruler

" for letting swtich away from a modified buffer w/o warning
set hidden

" for highlighting search word
set hlsearch

" Command-T configuration
let g:CommandTMaxHeight=20

" always show gitgutter col so text doesn't jump around when they come in
let g:gitgutter_sign_column_always=1
set updatetime=750

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" Show invisible chars
set list!

set title

" Always show the status line (even if no split windows)
set laststatus=2
" set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P

" Number of lines to keep between cursor and window boundary before scrolling
" kicks in.
set scrolloff=7
" Number of lines to jump when scrolling. Improves rendering speed
set scrolljump=5

if has("autocmd")
    if has("nvim")
        " Automatically lint files on save
        "autocmd! BufWritePost * Neomake
        augroup neomake
            autocmd!
            autocmd BufWritePost *.py,*.go Neomake
        augroup END
    endif

    " Automatically strip trailing whitespace
    augroup strip_whitespace
        autocmd!
        autocmd BufWritePre * StripWhitespace
    augroup END

    " Auto-detect git commit messages
    augroup git_commit_msg
        autocmd!
        autocmd BufNewFile,BufRead COMMIT_EDITMSG set filetype=gitcommit
    augroup END

    augroup fix_search_hi
        autocmd!
        autocmd BufNewFile,BufRead * highlight Search guifg=NONE guibg=NONE gui=bold,underline
    augroup END

endif

" Taken from http://dotfiles.org/~defunkt/.vimrc

" os x backspace fix
set backspace=indent,eol,start
"set t_kb
" fixdel

" tabs -> spaces
" set expandtab

" don't leave hardtabs
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" highlight the current line
" 2016-01-32: disabling this since it slows down rendering
" set cursorline

" turn mouse on
set mouse=a
" set ttymouse=xterm2

" space = pagedown, - = pageup
noremap <Space> <PageDown>
"noremap - <PageUp>

" remap'd keys
map <Tab><Tab> <C-W>w
nnoremap <F5><F5> :set invhls hls?<CR>    " use f5f5 to toggle search hilight
nnoremap <F4><F4> :set invwrap wrap?<CR>  " use f4f4 to toggle wordwrap
nnoremap <F2><F2> :vsplit<CR>
nnoremap <F3><F3> <C-W>w

" Shortcut to rapidly toggle `set list` a.k.a show invisibles
nmap <leader>l :set list!<CR>

" shortcuts to edit files in the same dir as the current open file
"map <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
"map <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
"map <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>
"map <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Show syntax highlighting groups for word under cursor
" nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" function RubyEndToken ()
"   let current_line = getline( '.' )
"   let braces_at_end = '{\s*\(|\(,\|\s\|\w\)*|\s*\)\?$'
"   let stuff_without_do = '^\s*\(class\|if\|unless\|begin\|case\|for\|module\|while\|until\|def\)'
"   let with_do = 'do\s*\(|\(,\|\s\|\w\)*|\s*\)\?$'
"
"   if match(current_line, braces_at_end) >= 0
"     return "\<CR>}\<C-O>O"
"   elseif match(current_line, stuff_without_do) >= 0
"     return "\<CR>end\<C-O>O"
"   elseif match(current_line, with_do) >= 0
"     return "\<CR>end\<C-O>O"
"   else
"     return "\<CR>"
"   endif
" endfunction

" imap <buffer> <CR> <C-R>=RubyEndToken()<CR>

" backup to ~/.tmp
set backup
set backupdir=$HOME/.tmp
set writebackup

" folding settings
set foldmethod=indent
set foldlevelstart=20

" Create .swp files here to avoid git status pollution
set dir=$HOME/.tmp
"
" misc
"set ai
set incsearch
" set showcmd
set nowrap

" Some tab helpers (<leader> is \)
map <leader>]t :tabnew<cr>
map <leader>]c :tabclose<cr>
map <leader>]m :tabmove
map <leader>]n :tabnext<cr>
map <leader>]p :tabprevious<cr>
map <leader>]` :tabfirst<cr>
map <leader>]1 1gt
map <leader>]2 2gt
map <leader>]3 3gt
map <leader>]4 4gt
map <leader>]5 5gt
map <leader>]6 6gt
map <leader>]7 7gt
map <leader>]8 8gt
map <leader>]9 9gt
map <leader>]0 :tablast<cr>

" reformat JSON
map <leader>jt  <Esc>:%!json_xs -f json -t json-pretty<CR>

" disable logipat plugin so that :E works again
let g:loaded_logipat = 1

" netrw settings
let g:netrw_liststyle=3
let g:netrw_fastbrowse=2
